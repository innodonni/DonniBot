import org.apache.tools.ant.filters.*

// Use plugin to set project.version based on latest git tag
buildscript {
    repositories {
        mavenCentral() // for plugin dependencies
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '0.9.9'
}

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
}

// Starts at '0.1.0-SNAPSHOT' and subsequently '{tag+0.0.n}-SNAPSHOT' if not on tag
// See https://github.com/allegro/axion-release-plugin/
version = scmVersion.version

// Task definitions
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

defaultTasks "all"

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.pircbotx:pircbotx:2.0.1'
    compile 'com.google.inject:guice:3.0'
    compile 'com.google.guava:guava:15.0'
    compile 'commons-beanutils:commons-beanutils:1.9.2'

    runtime 'ch.qos.logback:logback-classic:1.1.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.10.8'
}

task processConfig(type: Sync) {
    description 'Copies all config files into config folder in build directory.'
    from "$projectDir/src/main/config"
    into "$buildDir/config"
}
processResources.dependsOn processConfig

task libs(type: Sync) {
    description 'Copies all dependencies into libs folder in build directory.'
    from configurations.testRuntime
    into "$buildDir/libs"
}

task docs(type: Copy) {
    description 'Deploys markdown docs as txt files in build directory.'
    from projectDir
    into buildDir
    include '*.md'
    rename '(.+).md', '$1.txt'
}

// Fill application.properties with version
afterEvaluate {
    configure(tasks[sourceSets.main.processResourcesTaskName]) {
        filter(ReplaceTokens, tokens: [version: version])
    }
}

Iterable<String> classpath = ["config/"] +
                             configurations.testRuntime.collect { "libs/" + it.getName() }

jar {
    destinationDir = buildDir
    manifest {
        attributes 'Main-Class': 'org.virgonet.adonikam.donnibot.Main',
                   'Class-Path': classpath.join(" ")
    }
    dependsOn libs
}

task deployZip(type: Zip, dependsOn: [build, docs]) {
    description 'Deploys all necessary files to a single distributable zip file.'
    from buildDir
    destinationDir = file('build/distributions')
    include '*.jar', 'libs/*', 'config/*', '*.txt'
}
build.mustRunAfter clean // never deploy nothing

task checkUntrackedFiles(type:Exec) {
    description 'Checks there aren\'t any files that might be accidentally released.'
    executable 'git'
    args 'ls-files', '--others', '--exclude-standard', '--error-unmatch', '--', '*'
    ignoreExitValue = true
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    doLast {
        if (execResult.exitValue == 0) {
            throw new GradleException("Untracked/unignored files in tree:\n" + standardOutput.toString())
        }
    }
}

task checkDirtyTree(type:Exec) {
    description 'Checks there aren\'t any uncommitted changes when releasing.'
    executable 'git'
    args 'diff', '--no-ext-diff', '--quiet', '--exit-code'
}
// fail fast
assemble.mustRunAfter checkUntrackedFiles, checkDirtyTree, verifyRelease

task githubRelease(type:Exec) {
    description 'Release to github based on tag (using GITHUB_TOKEN in env).'
    executable 'gradle/bin/github-release-0.5.2-x64'
    args 'release',
         '--user', 'innodonni',
         '--repo', 'DonniBot',
         '--tag', 'v'+version,
            '--name', 'DonniBot-v'+version,
            '--description', 'Release of DonniBot version '+version
    if (version.toString().startsWith('0'))
        args '--pre-release'
}
githubRelease.mustRunAfter verifyRelease

task githubUpload(type:Exec, dependsOn: [deployZip, githubRelease]) {
    description 'Release to github based on tag (using GITHUB_TOKEN in env).'
    executable 'gradle/bin/github-release-0.5.2-x64'
    args 'upload',
            '--user', 'innodonni',
            '--repo', 'DonniBot',
            '--tag', 'v'+version,
            '--name', 'DonniBot-v'+version+'.zip',
            '--file', deployZip.archivePath
}

// release creates a tag for {tag+0.0.n} and pushes it using auth from ~/.netrc (see .travis.yml)
release.dependsOn clean, checkUntrackedFiles, checkDirtyTree, githubUpload

task all {
    description 'Build, and release if on a tag commit.'
    dependsOn deployZip
}

// trigger releases on Travis CI based on tag detected by release plugin
if(!version.toString().endsWith("-SNAPSHOT") &&
        System.getenv("GITHUB_TOKEN") &&  // required by githubRelease/Upload tasks
        System.getenv("CI_USER_TOKEN")) { // used by release plugin to push new tags
    all.dependsOn release

    // ship defaults under normal configuration filename
    processConfig << {
        copy {
            from "$buildDir/config"
            into "$buildDir/config"
            include 'defaults.properties'
            rename 'defaults.properties', 'donnibot.properties'
        }
    }
}